# -*- coding: utf-8 -*-
"""Optimizacion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1De0K9lTSpUP_ctCeLEoSOSokocsG_o4q
"""

!pip install ortools
from ortools.sat.python import cp_model
model = cp_model.CpModel()
import pandas as pd
import numpy as np

#Lectura de los datos
Q = pd.read_csv('https://raw.githubusercontent.com/jrestrepot/Optimizacion/main/Q.csv', index_col=0, sep=';')
L = pd.read_csv('https://raw.githubusercontent.com/jrestrepot/Optimizacion/main/L.csv', index_col=0, sep=';')
A = pd.read_csv('https://raw.githubusercontent.com/jrestrepot/Optimizacion/main/A.csv', index_col=0, sep=';')
D = pd.read_csv('https://raw.githubusercontent.com/jrestrepot/Optimizacion/main/D.csv', index_col=0, sep=';')

D=D.iloc[2:]
D=pd.DataFrame(D,dtype=int)
nsalonesP = len(Q.values) #Número de salones presenciales
nsalones = len(Q.values) +1
#ncursos = len(A.columns)
#nestudiantes = len(A.values)
ncursos=300
nestudiantes=300
nDias = 5
nI = 25

#Método auxiliar
def transfor(h):
  if (h)%25==0: 
    d = (h)//25
    i=25
  else:
    d = (h)//25+1
    i = (h)%25
  return d-1, i-1



x = {}
minimo = []

#Método auxiliar
def coef (f,c):
  a=A.iloc[f,c]
  b=L.iloc[f,0]
  return a*b 

#Declaración de las variables de decisión
for c in range(ncursos):
  for s in range(nsalones):
    for d in range(nDias):
      for i in range(nI):
        x[(c,s,d,i)] = model.NewBoolVar("X["+ str(c)+ "," + str(s) + ","+ str(d) + "," + str(i) + "]")

#Función objetivo
estud=0
for c in range(ncursos):
  for s in range(nsalonesP):
    for e in range(nestudiantes):
      estud=estud+coef(e,c)
    minimo.append(min(Q.iloc[s,0],estud))
model.Maximize(sum(minimo[f] * x[(c, s, d,i)] for c in range(ncursos) for s in range(nsalonesP) for d in range(nDias) for i in range(nI) for f in range(nsalonesP)))

#Restricciones
for c in range(ncursos):
  model.Add(sum(x[(c,s,d,i)] for s in range(nsalones) for d in range(nDias) for i in range(nI))==1)

for s in range(nsalones):
  for h in range(len(D.columns)):
    d,i = transfor(h+1)
    model.Add(sum(x[(c,s,d,i)] for c in range(ncursos)) <= D.iloc[s,h]) #Tenemos el mismo problema de arriba de sintaxis

for e in (nestudiantes):
  for d in range(nDias):
    for i in range(20):
      model.Add(sum(A.iloc[(e,c)]*x[(c,s,d,j)]<=1 for c in range(ncursos) for s in range(nsalones) for j in range(i,i+5)))

#Resolver el modelo
solver = cp_model.CpSolver()
solver.parameters.linearization_level = 0
#Checkear que el modelo sea factible
solutionrange = range(1)
